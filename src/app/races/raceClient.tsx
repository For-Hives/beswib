"use client";

import { Race } from "@/models/races.model";
import { fetchRaces, saveRace } from "@/services/races.services";
import Link from "next/link";
import { useState, useEffect, FormEvent } from "react";

export default function RaceClient({
  prefetchedRaces,
}: {
  prefetchedRaces: Race[];
}) {
  const [races, setRaces] = useState<Race[]>(prefetchedRaces || []);
  const [isLoading, setIsLoading] = useState<boolean>(!prefetchedRaces); // True if no prefetched data
  const [error, setError] = useState<string | null>(null);

  // Form state
  const [name, setName] = useState('');
  const [date, setDate] = useState('');
  const [location, setLocation] = useState('');
  const [description, setDescription] = useState('');


  useEffect(() => {
    // Only fetch if races weren't prefetched or to refresh
    if (!prefetchedRaces || prefetchedRaces.length === 0) {
      setIsLoading(true);
      fetchRaces()
        .then(data => {
          setRaces(data);
          setError(null);
        })
        .catch(err => {
          console.error("Error fetching races:", err);
          setError("Failed to load races.");
        })
        .finally(() => setIsLoading(false));
    }
  }, [prefetchedRaces]);

  async function onSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();
    setError(null);

    // Basic validation
    if (!name || !date || !location) {
        setError("Race name, date, and location are required.");
        return;
    }

    try {
      // Construct the new race object according to the Race model
      // ID is auto-generated by PocketBase, createdAt/updatedAt too.
      const newRaceData: Omit<Race, 'id' | 'createdAt' | 'updatedAt'> = {
        name,
        date,
        location,
        description: description || undefined, // Optional
        // organizerId could be added here if relevant
      };

      // Casting to 'any' then 'Race' for saving, as service expects full Race but some fields are auto-gen
      const result = await saveRace(newRaceData as any);
      console.log("New race added:", result);

      setRaces((prevRaces) => [...prevRaces, result]);
      // Clear form
      setName('');
      setDate('');
      setLocation('');
      setDescription('');

    } catch (err) {
      console.error("Error adding race:", err);
      setError(err instanceof Error ? err.message : "An unknown error occurred while adding the race.");
    }
  }

  if (isLoading) {
    return <p className="text-center text-gray-500 py-8">Loading races...</p>;
  }

  if (error) {
    return <p className="text-center text-red-500 py-8">Error: {error}</p>;
  }

  return (
    <div className="w-full max-w-4xl mx-auto">
      <form onSubmit={onSubmit} className="mb-12 p-6 bg-white shadow-xl rounded-lg space-y-6">
        <h2 className="text-2xl font-semibold text-gray-800 text-center">Add a New Race</h2>

        <div>
          <label htmlFor="name" className="block text-sm font-medium text-gray-700">Race Name</label>
          <input
            type="text"
            id="name"
            name="name"
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
            className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            placeholder="Enter race name"
          />
        </div>

        <div>
          <label htmlFor="date" className="block text-sm font-medium text-gray-700">Date</label>
          <input
            type="date"
            id="date"
            name="date"
            value={date}
            onChange={(e) => setDate(e.target.value)}
            required
            className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
          />
        </div>

        <div>
          <label htmlFor="location" className="block text-sm font-medium text-gray-700">Location</label>
          <input
            type="text"
            id="location"
            name="location"
            value={location}
            onChange={(e) => setLocation(e.target.value)}
            required
            className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            placeholder="City, State"
          />
        </div>

        <div>
          <label htmlFor="description" className="block text-sm font-medium text-gray-700">Description (Optional)</label>
          <textarea
            id="description"
            name="description"
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            rows={3}
            className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            placeholder="Tell us more about the race..."
          />
        </div>

        <button
          type="submit"
          className="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"
        >
          Add Race
        </button>
        {error && <p className="text-red-500 text-sm text-center mt-2">{error}</p>}
      </form>

      <div>
        <h2 className="text-3xl font-bold text-gray-800 text-center mb-8">
          Available Races
        </h2>
        {races.length === 0 && !isLoading ? (
          <p className="text-center text-gray-500">No races found. Add one above!</p>
        ) : (
          <ul className="space-y-6">
            {races.map((race) => (
              <li
                key={race.id}
                className="bg-white shadow-lg rounded-xl p-6 transition-all duration-300 hover:shadow-2xl"
              >
                <Link href={`/races/${race.id}`} className="block hover:bg-gray-50 p-1 -m-1 rounded-md">
                  <h3 className="text-2xl font-semibold text-blue-700 hover:text-blue-800 mb-2">{race.name}</h3>
                </Link>
                <p className="text-gray-600 mb-1">
                  <span className="font-medium">Date:</span> {new Date(race.date).toLocaleDateString(undefined, { year: 'numeric', month: 'long', day: 'numeric', timeZone: 'UTC' })}
                </p>
                <p className="text-gray-600 mb-3">
                  <span className="font-medium">Location:</span> {race.location}
                </p>
                {race.description && <p className="text-sm text-gray-500 mb-3 line-clamp-2">{race.description}</p>}
                 <Link href={`/races/${race.id}`} className="inline-block mt-2 text-sm text-blue-600 hover:text-blue-800 font-medium hover:underline">
                    View Details & Bibs &rarr;
                </Link>
              </li>
            ))}
          </ul>
        )}
      </div>
    </div>
  );
}
